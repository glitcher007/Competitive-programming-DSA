# Competitive-programming-DSA
// two pointer approach

class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        int n=position.size();
        if(n<2){
            return n;
        }
        vector<pair<int,double>>vec(n);
        for(int j=0;j<n;j++){
          vec[j]={position[j],abs(target-position[j])/((double)speed[j])};

        }
        sort(vec.begin(),vec.end());
        int cnt=1;
        int j=n-1;
        for(int i=n-2;i>=0;i--){
            if(vec[j].second<vec[i].second){
                j=i;
                cnt++;
            }
        }
        return cnt;
        
    }
};

// stack solution 
lass Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
       vector<pair<int,int>>temp;
       int n=position.size();
       for(int j=0;j<n;j++){
           temp.emplace_back(position[j],speed[j]);
       }
       sort(temp.begin(),temp.end(),greater<pair<int,int>>());
       stack<pair<int,int>>s;
       s.emplace(temp[0]);
       for(int j=1;j<n;j++){
           float next=(target-s.top().first)*1.0/s.top().second;
           float cur=(target-temp[j].first)*1.0/temp[j].second;
           if(cur>next){
               s.emplace(temp[j]);
           }
       }
       return s.size();
        
    }
};
